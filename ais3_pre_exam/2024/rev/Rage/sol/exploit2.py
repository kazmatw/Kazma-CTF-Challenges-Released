def reverse_p1(return_val, a2):
    # Iterate over possible values of a1
    for a1 in range(65, 91):
        v5 = (17 * a2 + a1 - 65) % 26
        v4 = a2 % 3 + 3
        v2 = a2 % 3
        if v2 == 2:
            v5 = (v5 - v4 + 26) % 26
        elif v2 <= 2:
            if v2:
                if v2 == 1:
                    v5 = (2 * v4 + v5) % 26
            else:
                v5 = (v4 * v5 + 7) % 26

        if (v5 + 65) == return_val:
            return a1

    return -1  # No valid a1 found


xor1 = [0x0E, 0x0D, 0x7D, 0x06, 0x0F, 0x17, 0x76, 0x04, 0x00]
xor2 = [0x6D, 0x00, 0x1B, 0x7C, 0x6C, 0x13, 0x62, 0x11, 0x00]
xor3 = [0x1E, 0x7E, 0x06, 0x13, 0x07, 0x66, 0x0E, 0x71, 0x00]
xor4 = [0x17, 0x14, 0x1D, 0x70, 0x79, 0x67, 0x74, 0x33, 0x00]
buf1 = "DHLIYJEG"
buf2 = "MZRERYND"
buf3 = "RUYODBAH"
buf4 = "BKEMPBRE"


def main():
    print("AIS3{G0D", end="")
    for i in range(8):
        p1 = reverse_p1(ord(buf1[i]), i)
        print(chr(p1 ^ xor1[i]), end="")
    for i in range(8):
        p1 = reverse_p1(ord(buf2[i]), i + 0x20)
        print(chr(p1 ^ xor2[i]), end="")
    for i in range(8):
        p1 = reverse_p1(ord(buf3[i]), i + 0x40)
        print(chr(p1 ^ xor3[i]), end="")
    for i in range(8):
        p1 = reverse_p1(ord(buf4[i]), i + 0x60)
        print(chr(p1 ^ xor4[i]), end="")


if __name__ == "__main__":
    main()
