from angr import *
from claripy import *

p = Project("./rage")
start = 0x08049700
state = p.factory.blank_state(addr=start)

pw0 = BVS("pw0", 64)
pw1 = BVS("pw1", 64)
pw2 = BVS("pw2", 64)
pw3 = BVS("pw3", 64)

fake_chunk0 = 0xFFFFC93C
buffer0 = 0x090FB2D4
fake_chunk1 = 0xFFFFC94C
buffer1 = 0x090FB2D8
fake_chunk2 = 0xFFFFC95C
buffer2 = 0x090FB2DC
fake_chunk3 = 0xFFFFC96C
buffer3 = 0x090FB2E0

state.memory.store(buffer0, fake_chunk0, endness=p.arch.memory_endness)
state.memory.store(buffer1, fake_chunk1, endness=p.arch.memory_endness)
state.memory.store(buffer2, fake_chunk2, endness=p.arch.memory_endness)
state.memory.store(buffer3, fake_chunk3, endness=p.arch.memory_endness)

state.memory.store(fake_chunk0, pw0)
state.memory.store(fake_chunk1, pw1)
state.memory.store(fake_chunk2, pw2)
state.memory.store(fake_chunk3, pw3)

simgr = p.factory.simgr(state)


def find(simgr):
    output = simgr.posix.dumps(1)
    return b"Yes" in output


def avoid(simgr):
    output = simgr.posix.dumps(1)
    return b"wrong" in output


simgr.explore(find=find, avoid=avoid)

keys = [
    b"\x0e\x0d\x7d\x06\x0f\x17\x76\x04",
    b"\x6d\x00\x1b\x7c\x6c\x13\x62\x11",
    b"\x1e\x7e\x06\x13\x07\x66\x0e\x71",
    b"\x17\x14\x1d\x70\x79\x67\x74\x33",
]

if simgr.found:
    sol = simgr.found[0]
    flag = "AIS3{G0D"
    for i, pw in enumerate([pw0, pw1, pw2, pw3]):
        pw_bytes = sol.solver.eval(pw, cast_to=bytes)
        xored_flag = bytes([b ^ k for b, k in zip(pw_bytes, keys[i])])
        flag += xored_flag.decode()
    print(flag)
else:
    print("No solution found")
